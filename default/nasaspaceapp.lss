
nasaspaceapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000180  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000057  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001af  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000111  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e5  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f8  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


int main()
{

DDRB=0b00001111;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	87 bb       	out	0x17, r24	; 23



void serial_begin() 
{
	UBRRH = (BAUD_PRESCALE >> 8);
  80:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	89 b9       	out	0x09, r24	; 9
	
	/****************************** UCSRB bits *****************************************/	
	UCSRB |= (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);	                       /* TX enable */	
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	88 69       	ori	r24, 0x98	; 152
  8a:	8a b9       	out	0x0a, r24	; 10
{

DDRB=0b00001111;

serial_begin();
sei();
  8c:	78 94       	sei
while(1)
{

	if(msgbuffer=='w')
	{
	PORTB=0b00001010;
  8e:	7a e0       	ldi	r23, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	20 e2       	ldi	r18, 0x20	; 32
  92:	3e e4       	ldi	r19, 0x4E	; 78
	PORTB=0b00000110;
	_delay_ms(10);
	}
	else if(msgbuffer=='d')
	{
	PORTB=0b00001001;
  94:	69 e0       	ldi	r22, 0x09	; 9
	PORTB=0b00000101;
	_delay_ms(10);
	}
	else if(msgbuffer=='a')
	{
	PORTB=0b00000110;
  96:	56 e0       	ldi	r21, 0x06	; 6
	PORTB=0b00001010;
	_delay_ms(10);
	}
	else if(msgbuffer=='s')
	{
	PORTB=0b00000101;
  98:	45 e0       	ldi	r20, 0x05	; 5
sei();

while(1)
{

	if(msgbuffer=='w')
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	87 37       	cpi	r24, 0x77	; 119
  a0:	11 f4       	brne	.+4      	; 0xa6 <main+0x2a>
	{
	PORTB=0b00001010;
  a2:	78 bb       	out	0x18, r23	; 24
  a4:	17 c0       	rjmp	.+46     	; 0xd4 <main+0x58>
	_delay_ms(10);
	}
	else if(msgbuffer=='s')
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	83 37       	cpi	r24, 0x73	; 115
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x36>
	{
	PORTB=0b00000101;
  ae:	48 bb       	out	0x18, r20	; 24
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <main+0x58>
	_delay_ms(10);
	}
	else if(msgbuffer=='a')
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	11 f4       	brne	.+4      	; 0xbe <main+0x42>
	{
	PORTB=0b00000110;
  ba:	58 bb       	out	0x18, r21	; 24
  bc:	0b c0       	rjmp	.+22     	; 0xd4 <main+0x58>
	_delay_ms(10);
	}
	else if(msgbuffer=='d')
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	84 36       	cpi	r24, 0x64	; 100
  c4:	11 f4       	brne	.+4      	; 0xca <main+0x4e>
	{
	PORTB=0b00001001;
  c6:	68 bb       	out	0x18, r22	; 24
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <main+0x58>
	_delay_ms(10);
	}
	else if(msgbuffer=='l')
  ca:	80 91 60 00 	lds	r24, 0x0060
  ce:	8c 36       	cpi	r24, 0x6C	; 108
  d0:	21 f7       	brne	.-56     	; 0x9a <main+0x1e>
	{
	PORTB=0b00000000;
  d2:	18 ba       	out	0x18, r1	; 24
  d4:	c9 01       	movw	r24, r18
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x5a>
  da:	df cf       	rjmp	.-66     	; 0x9a <main+0x1e>

000000dc <serial_begin>:



void serial_begin() 
{
	UBRRH = (BAUD_PRESCALE >> 8);
  dc:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	89 b9       	out	0x09, r24	; 9
	
	/****************************** UCSRB bits *****************************************/	
	UCSRB |= (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);	                       /* TX enable */	
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	88 69       	ori	r24, 0x98	; 152
  e6:	8a b9       	out	0x0a, r24	; 10
	//UCSRB |= (1<<RXEN);
	
	/*************************** UCSRC bits *********************************************/
	//UCSRC |= (1 << URSEL);                     /* USART register select. The URSEL must be one when writing the UCSRC */
	//UCSRC |= ((1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1));         /* combine with UCSZ2 from UCSRB for other character size combinations */
}
  e8:	08 95       	ret

000000ea <__vector_11>:




ISR(USART_RXC_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
	msgbuffer = UDR;
  f6:	8c b1       	in	r24, 0x0c	; 12
  f8:	80 93 60 00 	sts	0x0060, r24
	
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
